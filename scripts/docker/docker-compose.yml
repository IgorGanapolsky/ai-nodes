version: '3.8'

services:
  # Main AI Nodes application
  ai-nodes-app:
    build:
      context: ../..
      dockerfile: scripts/docker/Dockerfile
    image: ai-nodes:latest
    container_name: ai-nodes-app
    restart: unless-stopped
    environment:
      - NODE_ENV=production
      - DATABASE_PATH=/app/db/ai_nodes.db
    env_file:
      - ../../.env
    volumes:
      # Persistent data
      - ai-nodes-data:/app/data
      - ai-nodes-logs:/app/logs
      - ai-nodes-backups:/app/backups
      - ai-nodes-db:/app/db
      - ai-nodes-monitoring:/app/monitoring
      # Configuration (read-only)
      - ../../.env:/app/.env:ro
      - ./config:/app/config:ro
    networks:
      - ai-nodes-network
    healthcheck:
      test: ["CMD", "bash", "/app/scripts/health-checks/basic.sh"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s
    depends_on:
      - ai-nodes-redis
    labels:
      - "com.ai-nodes.service=main"
      - "com.ai-nodes.version=1.0.0"

  # Monitoring service
  ai-nodes-monitor:
    image: ai-nodes:latest
    container_name: ai-nodes-monitor
    restart: unless-stopped
    environment:
      - NODE_ENV=production
      - SERVICE_TYPE=monitor
    env_file:
      - ../../.env
    volumes:
      - ai-nodes-data:/app/data
      - ai-nodes-logs:/app/logs
      - ai-nodes-db:/app/db
      - ai-nodes-monitoring:/app/monitoring
      - ../../.env:/app/.env:ro
    networks:
      - ai-nodes-network
    command: bash -c "while true; do /app/scripts/monitor.sh; sleep 900; done"
    healthcheck:
      test: ["CMD", "pgrep", "-f", "monitor.sh"]
      interval: 60s
      timeout: 10s
      retries: 3
    depends_on:
      - ai-nodes-app
      - ai-nodes-redis
    labels:
      - "com.ai-nodes.service=monitor"

  # Reinvestment service
  ai-nodes-reinvest:
    image: ai-nodes:latest
    container_name: ai-nodes-reinvest
    restart: unless-stopped
    environment:
      - NODE_ENV=production
      - SERVICE_TYPE=reinvest
    env_file:
      - ../../.env
    volumes:
      - ai-nodes-data:/app/data
      - ai-nodes-logs:/app/logs
      - ai-nodes-db:/app/db
      - ../../.env:/app/.env:ro
    networks:
      - ai-nodes-network
    command: bash -c "while true; do /app/scripts/reinvest.sh; sleep 3600; done"
    healthcheck:
      test: ["CMD", "pgrep", "-f", "reinvest.sh"]
      interval: 120s
      timeout: 15s
      retries: 3
    depends_on:
      - ai-nodes-app
      - ai-nodes-redis
    labels:
      - "com.ai-nodes.service=reinvest"

  # Health check service
  ai-nodes-health:
    image: ai-nodes:latest
    container_name: ai-nodes-health
    restart: unless-stopped
    environment:
      - NODE_ENV=production
      - SERVICE_TYPE=health
    env_file:
      - ../../.env
    volumes:
      - ai-nodes-data:/app/data
      - ai-nodes-logs:/app/logs
      - ai-nodes-db:/app/db
      - ../../.env:/app/.env:ro
    networks:
      - ai-nodes-network
    command: bash -c "while true; do /app/scripts/health-checks/basic.sh; sleep 300; done"
    healthcheck:
      test: ["CMD", "pgrep", "-f", "health-checks"]
      interval: 60s
      timeout: 10s
      retries: 3
    depends_on:
      - ai-nodes-app
    labels:
      - "com.ai-nodes.service=health"

  # Redis for caching and coordination
  ai-nodes-redis:
    image: redis:7-alpine
    container_name: ai-nodes-redis
    restart: unless-stopped
    command: redis-server --appendonly yes --maxmemory 256mb --maxmemory-policy allkeys-lru
    volumes:
      - ai-nodes-redis:/data
    networks:
      - ai-nodes-network
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 5s
      retries: 3
    labels:
      - "com.ai-nodes.service=redis"

  # Backup service (runs on schedule)
  ai-nodes-backup:
    image: ai-nodes:latest
    container_name: ai-nodes-backup
    restart: "no"
    environment:
      - NODE_ENV=production
      - SERVICE_TYPE=backup
    env_file:
      - ../../.env
    volumes:
      - ai-nodes-data:/app/data
      - ai-nodes-logs:/app/logs
      - ai-nodes-backups:/app/backups
      - ai-nodes-db:/app/db
      - ../../.env:/app/.env:ro
    networks:
      - ai-nodes-network
    command: /app/scripts/backup.sh full
    profiles:
      - backup
    labels:
      - "com.ai-nodes.service=backup"

  # Nginx reverse proxy (optional)
  ai-nodes-nginx:
    image: nginx:alpine
    container_name: ai-nodes-nginx
    restart: unless-stopped
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./nginx/conf.d:/etc/nginx/conf.d:ro
      - ai-nodes-logs:/var/log/nginx
    networks:
      - ai-nodes-network
    depends_on:
      - ai-nodes-app
    profiles:
      - web
    labels:
      - "com.ai-nodes.service=nginx"

  # Prometheus monitoring (optional)
  ai-nodes-prometheus:
    image: prom/prometheus:latest
    container_name: ai-nodes-prometheus
    restart: unless-stopped
    ports:
      - "9090:9090"
    volumes:
      - ./prometheus/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - ai-nodes-prometheus:/prometheus
    networks:
      - ai-nodes-network
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/usr/share/prometheus/console_libraries'
      - '--web.console.templates=/usr/share/prometheus/consoles'
      - '--web.enable-lifecycle'
      - '--storage.tsdb.retention.time=30d'
    profiles:
      - monitoring
    labels:
      - "com.ai-nodes.service=prometheus"

  # Grafana dashboard (optional)
  ai-nodes-grafana:
    image: grafana/grafana:latest
    container_name: ai-nodes-grafana
    restart: unless-stopped
    ports:
      - "3000:3000"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=ai-nodes-admin
      - GF_INSTALL_PLUGINS=grafana-clock-panel,grafana-simple-json-datasource
    volumes:
      - ai-nodes-grafana:/var/lib/grafana
      - ./grafana/provisioning:/etc/grafana/provisioning:ro
    networks:
      - ai-nodes-network
    depends_on:
      - ai-nodes-prometheus
    profiles:
      - monitoring
    labels:
      - "com.ai-nodes.service=grafana"

networks:
  ai-nodes-network:
    driver: bridge
    labels:
      - "com.ai-nodes.network=main"

volumes:
  # Persistent application data
  ai-nodes-data:
    driver: local
    labels:
      - "com.ai-nodes.volume=data"

  ai-nodes-logs:
    driver: local
    labels:
      - "com.ai-nodes.volume=logs"

  ai-nodes-backups:
    driver: local
    labels:
      - "com.ai-nodes.volume=backups"

  ai-nodes-db:
    driver: local
    labels:
      - "com.ai-nodes.volume=database"

  ai-nodes-monitoring:
    driver: local
    labels:
      - "com.ai-nodes.volume=monitoring"

  ai-nodes-redis:
    driver: local
    labels:
      - "com.ai-nodes.volume=redis"

  # Optional monitoring volumes
  ai-nodes-prometheus:
    driver: local
    labels:
      - "com.ai-nodes.volume=prometheus"

  ai-nodes-grafana:
    driver: local
    labels:
      - "com.ai-nodes.volume=grafana"