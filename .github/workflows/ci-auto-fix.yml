name: CI Auto-Fix

on:
  workflow_run:
    workflows: ["CI"]
    types: [completed]
    branches: [main, develop]
  workflow_dispatch:
    inputs:
      fix_type:
        description: 'Type of fix to perform'
        required: false
        default: 'dependencies'
        type: choice
        options:
          - dependencies
          - lint

permissions:
  contents: write
  pull-requests: write
  actions: write
  checks: read

env:
  CI: true
  BOT_NAME: "ci-auto-fix"
  BRANCH_PREFIX: "fix/"

jobs:
  check-ci-status:
    runs-on: ubuntu-latest
    outputs:
      should_fix: ${{ steps.check.outputs.should_fix }}
      failed_jobs: ${{ steps.check.outputs.failed_jobs }}
      run_id: ${{ steps.check.outputs.run_id }}
    steps:
      - name: Check CI status
        id: check
        run: |
          if [ "${{ github.event.inputs.fix_type }}" != "" ]; then
            echo "should_fix=true" >> $GITHUB_OUTPUT
            echo "failed_jobs=${{ github.event.inputs.fix_type }}" >> $GITHUB_OUTPUT
            echo "run_id=${{ github.run_id }}" >> $GITHUB_OUTPUT
            exit 0
          fi

          if [ "${{ github.event.workflow_run.conclusion }}" == "failure" ]; then
            echo "should_fix=true" >> $GITHUB_OUTPUT
            echo "run_id=${{ github.event.workflow_run.id }}" >> $GITHUB_OUTPUT

            # Get failed job names using GitHub API
            failed_jobs=$(gh api repos/${{ github.repository }}/actions/runs/${{ github.event.workflow_run.id }}/jobs \
              --jq '.jobs[] | select(.conclusion == "failure") | .name' | tr '\n' ',' | sed 's/,$//')
            echo "failed_jobs=${failed_jobs}" >> $GITHUB_OUTPUT
          else
            echo "should_fix=false" >> $GITHUB_OUTPUT
          fi
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  auto-fix:
    runs-on: ubuntu-latest
    needs: check-ci-status
    if: needs.check-ci-status.outputs.should_fix == 'true'
    strategy:
      fail-fast: false
      matrix:
        fix_type: [dependencies, lint]
    steps:
      - name: Checkout code
        uses: actions/checkout@v5
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          fetch-depth: 0

      - name: Setup Node.js and PNPM
        uses: actions/setup-node@v5
        with:
          node-version: 20
          cache: 'pnpm'

      - name: Enable Corepack (PNPM)
        run: corepack enable

      - uses: pnpm/action-setup@v4
        with:
          version: 8

      - name: Get pnpm store path
        id: pnpm-cache
        run: echo "STORE_PATH=$(pnpm store path)" >> $GITHUB_OUTPUT

      - uses: actions/cache@v4
        with:
          path: ${{ steps.pnpm-cache.outputs.STORE_PATH }}
          key: pnpm-store-${{ runner.os }}-${{ hashFiles('**/pnpm-lock.yaml', '**/package.json') }}
          restore-keys: |
            pnpm-store-${{ runner.os }}-

      - name: Configure Git
        run: |
          git config --global user.name "${{ env.BOT_NAME }}"
          git config --global user.email "noreply@github.com"

      - name: Create fix branch
        id: branch
        run: |
          timestamp=$(date +%Y%m%d-%H%M%S)
          branch_name="${{ env.BRANCH_PREFIX }}${{ matrix.fix_type }}-${timestamp}"
          git checkout -b "${branch_name}"
          echo "branch_name=${branch_name}" >> $GITHUB_OUTPUT

      - name: Install dependencies
        run: pnpm install --no-frozen-lockfile

      - name: Fix Dependencies
        if: matrix.fix_type == 'dependencies' && (contains(needs.check-ci-status.outputs.failed_jobs, 'lint') || contains(needs.check-ci-status.outputs.failed_jobs, 'type-check') || contains(needs.check-ci-status.outputs.failed_jobs, 'test') || contains(needs.check-ci-status.outputs.failed_jobs, 'build') || github.event.inputs.fix_type == 'dependencies')
        run: |
          echo "üîÑ Fixing dependency conflicts..."

          # Remove lock file and reinstall
          rm -f pnpm-lock.yaml
          pnpm install --no-frozen-lockfile

          # Check if changes were made
          if ! git diff --quiet pnpm-lock.yaml package.json; then
            git add pnpm-lock.yaml package.json packages/*/package.json apps/*/package.json || true
            git commit -m "fix: resolve dependency conflicts

            - Regenerated pnpm-lock.yaml
            - Resolved dependency conflicts

            Auto-generated by CI auto-fix" || true
          fi

      - name: Fix Lint Errors
        if: matrix.fix_type == 'lint' && (contains(needs.check-ci-status.outputs.failed_jobs, 'lint') || github.event.inputs.fix_type == 'lint')
        run: |
          echo "üîÑ Fixing lint errors..."

          # Try to auto-fix ESLint errors
          pnpm run lint --fix || true

          # Try to auto-format with Prettier
          pnpm run format || true

          # Check if changes were made
          if ! git diff --quiet; then
            git add -A
            git commit -m "style: fix lint errors

            - Applied ESLint auto-fixes
            - Applied Prettier formatting

            Auto-generated by CI auto-fix" || true
          fi


      - name: Run verification
        id: verify
        run: |
          echo "üîç Running verification checks..."

          success=true
          results=""

          if [[ "${{ matrix.fix_type }}" == "dependencies" ]]; then
            echo "Verifying dependencies..."
            if pnpm install --frozen-lockfile; then
              results="‚úÖ Dependencies: FIXED\n$results"
            else
              results="‚ùå Dependencies: Still failing\n$results"
              success=false
            fi
          fi

          if [[ "${{ matrix.fix_type }}" == "lint" ]]; then
            echo "Verifying lint..."
            if pnpm run lint; then
              results="‚úÖ Lint: FIXED\n$results"
            else
              results="‚ö†Ô∏è  Lint: Partially fixed\n$results"
            fi
          fi

          echo -e "verification_results<<EOF\n$results\nEOF" >> $GITHUB_OUTPUT
          echo "success=$success" >> $GITHUB_OUTPUT

      - name: Push fix branch
        if: success()
        run: |
          # Only push if we have commits
          if [ $(git rev-list HEAD ^origin/${{ github.ref_name }} --count) -gt 0 ]; then
            git push origin ${{ steps.branch.outputs.branch_name }}
            echo "Pushed fix branch: ${{ steps.branch.outputs.branch_name }}"
          else
            echo "No changes to push"
          fi

      - name: Create Pull Request
        if: success()
        run: |
          # Only create PR if we have commits
          if [ $(git rev-list HEAD ^origin/${{ github.ref_name }} --count) -gt 0 ]; then
            pr_body="## üîß CI Auto-Fix

            This PR was automatically created by the CI auto-fix system to resolve detected issues.

            ### Fix Results
            ${{ steps.verify.outputs.verification_results }}

            ### Changes Made
            - **Fix Type**: ${{ matrix.fix_type }}
            - **Triggered by**: CI failure in run [${{ needs.check-ci-status.outputs.run_id }}](${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ needs.check-ci-status.outputs.run_id }})
            - **Failed Jobs**: ${{ needs.check-ci-status.outputs.failed_jobs }}

            ### Next Steps
            1. Review the automated changes
            2. Test the functionality manually
            3. Merge if everything looks good

            ---
            ü§ñ *Generated by CI auto-fix system*
            "

            gh pr create \
              --title "fix: resolve ${{ matrix.fix_type }} issues" \
              --body "$pr_body" \
              --head "${{ steps.branch.outputs.branch_name }}" \
              --base "${{ github.ref_name }}" \
              --label "auto-fix,ci-fix,${{ matrix.fix_type }}"

            echo "Created pull request for fix branch"
          else
            echo "No changes to create PR for"
          fi
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  summary:
    runs-on: ubuntu-latest
    needs: [check-ci-status, auto-fix]
    if: always() && needs.check-ci-status.outputs.should_fix == 'true'
    steps:
      - name: Summary
        run: |
          echo "üîß CI Auto-Fix Summary"
          echo "Failed jobs: ${{ needs.check-ci-status.outputs.failed_jobs }}"
          echo "Auto-fix completed. Check created PRs for results."
